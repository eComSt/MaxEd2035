# Декораторы II

# Атрибуты __name__ и __doc__

'''
Атрибут __name__ содержит имя функции как строку. Это наиболее полезно в сценариях, 
где необходимо получить имя функции динамически, например, в декораторах, 
когда нужно вывести или использовать имя функции, которая оборачивается. 
'''

def my_function():
    return 'Привет!'

print(my_function.__name__)     # my_function

'''
Атрибут __doc__ содержит строку документации функции, которая обычно располагается 
сразу после строки с определением функции. Эта строка используется для описания назначения функции, 
аргументов, которые она принимает, значений, которые возвращает.  
'''

def my_function():
    '''Это строка документации. Здесь можно описать назначение функции'''
    return 'Привет!'

print(my_function.__name__)     # my_function
print(my_function.__doc__)      # Это строка документации. Здесь можно описать назначение функции

'''
Создайте функцию cost(), которая принимает на вход целое число price 
и возвращает строку «Стоимость товара: <price>». 
Добавьте в функцию строку документации, объясняющую ее назначение.
'''

def value(func):
    def wrapper(*args, **kwargs):
        return func(*args, **kwargs) + ' рублей.'
    wrapper.__name__ = func.__name__
    wrapper.__doc__ = func.__doc__
    return wrapper

@value
def cost(price):
    '''Функция показывает стоимость товара'''
    return f'Стоимость товара: {price}'

print(cost.__name__)
print(cost.__doc__)

# -----------------------------------------------------------------------------------------------------------

# Декоратор wraps

'''
Декоратор wraps из модуля functools используется в декораторах для того, 
чтобы не потерять метаинформацию о декорируемой функции. 
Его использование помогает сохранить исходные атрибуты, 
делая декорированную версию «похожей» на оригинал с точки зрения этих атрибутов.
'''

from functools import wraps

def my_function():
    '''Это строка документации. Здесь описывается функция '''
    return 'Привет!'

def value(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        return f'{func(*args, **kwargs)} рублей'
    return wrapper

@value
def cost(price):
    '''Функция возвращает стоимость товара'''
    return f'Стоимость товара: {price}'

print(cost.__name__)
print(cost.__doc__)

'''
Напишите программу, которая организует систему логирования, которая поможет отслеживать, 
какие функции управления каталогом вызываются, включая их назначение на основе документационных строк. 
Это поможет в будущем анализировать использование системы и оптимизировать ее работу

1.	Создать словарь books, который будет хранить все имеющиеся в каталоге книги (ключ – название книги, значение – автор)
2.	Создать функцию add_book(title, author), которая будет добавлять новую книгу в каталог и выводить сообщение об успехе
3.	Создать функцию find_book(title), которая будет искать книгу по названию и выводить сообщение в зависимости от успеха
4.	Создать декоратор log_function_info(func), который будет указывать имя вызываемой функции и ее документацию
5.	Применить декоратор к имеющимся функциям
6.	Протестировать работу функций add_book() и find_book()
'''

from functools import wraps

def log_function_info(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        print(f'Вызывается функция: {func.__name__}')
        print(f'Документация: {func.__doc__}')
        return func(*args, **kwargs)
    return wrapper

@log_function_info
def add_book(title, author):
    '''Добавляет книгу с указанным названием и автором в каталог.'''
    if title not in books:
        books[title] = author
        print(f'Книга {title} автора {author} успешно добавлена в каталог.')

@log_function_info
def find_book(title):
    '''Ищет книгу по названию и возвращает статус наличия в каталоге'''
    if title in books:
        print(f'Поиск книги {title} в каталоге... Найдена!')
    else:
        print(f'Поиск книги {title} в каталоге... К сожалению, книга не найдена.')

books = {}
add_book('Властелин колец', 'Дж. Р. Р. Толкиен')
find_book('Властелин колец')
find_book('Гарри Поттер')

# -----------------------------------------------------------------------------------------------------------

# Декораторы с аргументами

'''
Если самому декоратору нужны дополнительные параметры для управления поведением, 
обычно создается еще один уровень обертывания, 
который принимает эти аргументы и возвращает сам декоратор.
'''

def check_age(min_age):
    def decorator(func):
        def wrapper(age, *args, **kwargs):
            if age < min_age:
                return f'Извините, посещение аттракциона разрешено с {min_age} лет.'
            return func(age, *args, **kwargs)
        return wrapper
    return decorator

@check_age(16)
def go_attraction(age, title):
    '''Пожелание приятного посещения аттракциона'''
    return f'Приятного посещения аттракциона: {title}'

age_user = int(input('Введите ваш возраст:'))
print(go_attraction(age_user, 'Воздушный экспресс'))
